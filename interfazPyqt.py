# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'interfazPyqt.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(813, 545)
        MainWindow.setStyleSheet("background-color: lightblue;")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("D:/Pictures/Saved Pictures/HS (2).png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(310, 50, 200, 30))
        self.pushButton2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton2.setGeometry(QtCore.QRect(310, 100, 200, 30))
        
        self.pushButton.setObjectName("pushButton")
        self.pushButton2.setObjectName("pushButton")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(40, 270, 731, 220))
        self.pushButton.clicked.connect(self.separar_p)
        self.pushButton2.clicked.connect(self.colocar_i)
        
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(2)
        self.tableWidget.setRowCount(0)
        self.tableWidget.setHorizontalHeaderLabels(['Palabras', 'Imagen'])
        # Define el ancho de las columnas
        self.tableWidget.setColumnWidth(0, 225)  # Establece el ancho de la primera columna en 200 píxeles
        self.tableWidget.setColumnWidth(1, 500)  # Establece el ancho de la segunda columna en 150 píxeles
        
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(40, 40, 250, 200))
        self.textEdit.setObjectName("textEdit")
        
        self.textEdit_2 = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit_2.setGeometry(QtCore.QRect(520, 40, 250, 200))
        self.textEdit_2.setObjectName("textEdit_2")
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 813, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Separador de palabras"))  #pantalla principal
        self.pushButton.setText(_translate("MainWindow", "Separar palabras"))         #boton
        self.pushButton2.setText(_translate("MainWindow", "Seleccionar imagen")) 
        
    def separar_p(self):
        #obtener texto del cuadro de la izq
        texto = self.textEdit.toPlainText()
        #pasar/copiar al segundo cuadro de texto
        self.textEdit_2.setPlainText(texto)
        #retorna una lista con todas las palabras que hay siempre y cuando esten separadas por un salto de linea, un tabular o una diagonal
        texto_spliteado = texto.split()
        for r in range(len(texto_spliteado), self.tableWidget.rowCount()):   #rowCount dice cuantas lineas actuales tiene
            self.tableWidget.removeRow(len(texto_spliteado));  #quitar la fila de la posición del ultimo texto spliteado, es para no tener filas de más o contexto viejo.
        
        for r in range(len(texto_spliteado)):
            rowAct = self.tableWidget.rowCount()  #para sacar la fila actual
            #agregar cada palabra en una de las filas
            if (rowAct <= r):
                self.tableWidget.insertRow(rowAct)
                self.tableWidget.setItem(r,0, QtWidgets.QTableWidgetItem(texto_spliteado[r]))  #fila, columno y elemento a agregar
            else:
                self.tableWidget.setItem(r,0, QtWidgets.QTableWidgetItem(texto_spliteado[r]))
                
    def colocar_i(self):
         # Abre un diálogo de archivo para seleccionar una imagen
        options = QFileDialog.Options()
        options |= QFileDialog.ReadOnly
        file_name, _ = QFileDialog.getOpenFileName(None, "Seleccionar imagen", "", "Images (*.png *.jpg *.jpeg *.gif *.bmp *.ico *.svg);;All Files (*)", options=options)
        
        if file_name:
            image = QtGui.QPixmap(file_name)
            image = image.scaledToWidth(70)  # Ajusta el ancho de la imagen (ajusta el número según lo desees)
            image_item = QtWidgets.QTableWidgetItem()
            image_item.setData(QtCore.Qt.DecorationRole, QtGui.QIcon(image))
            row = self.tableWidget.rowCount()
            self.tableWidget.insertRow(row)
            self.tableWidget.setItem(row, 0, QtWidgets.QTableWidgetItem("Imagen"))
            self.tableWidget.setItem(row, 1, image_item)
            
            # Crea una etiqueta con la imagen seleccionada
            # image_label = QtWidgets.QLabel()
            # pixmap = QtGui.QPixmap(file_name)
            # image_label.setPixmap(pixmap)
            # image_label.setAlignment(QtCore.Qt.AlignCenter)  # Opcional, para centrar la imagen

            # row = self.tableWidget.rowCount()
            # self.tableWidget.insertRow(row)
            # self.tableWidget.setItem(row, 0, QtWidgets.QTableWidgetItem("Imagen"))
            # self.tableWidget.setCellWidget(row, 1, image_label)
             # Muestra la imagen seleccionada en la tabla
            

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
    

